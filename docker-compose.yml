version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:5000
    depends_on:
      - backend
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    networks:
      - tender-network

  # Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=your-secret-key-change-in-production
      - DATABASE_URL=sqlite:///tender_management.db
      - PORT=5000
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/models:/app/models
      - ./backend/tender_management.db:/app/tender_management.db
    networks:
      - tender-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (Alternative to SQLite)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=tender_management
      - POSTGRES_USER=tender_user
      - POSTGRES_PASSWORD=tender_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - tender-network
    profiles:
      - postgres

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tender-network
    profiles:
      - cache

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - tender-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  tender-network:
    driver: bridge